{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import _objectSpread from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ToDoList from'./ToDoList';import NavBar from'./NavBar';import AddTask from'./AddTask';import{BrowserRouter,Switch,Route}from'react-router-dom';import initialData from'../initialData';import uniqueid from'uniqueid';var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={tasks:initialData};_this.onToggleCompleted=function(taskId){var taskToUpdate=_this.state.tasks.find(function(task){return task.id===taskId;});// recherche dans la liste de t창che celle que je dois modifier (pour les afficher dans completed)\ntaskToUpdate.completed=!taskToUpdate.completed;_this.setState(function(prevState){prevState.tasks.map(function(task){return task.id===taskId?taskToUpdate:task;});});};_this.onAddTask=function(newTaskName){var newTask={id:uniqueid(),name:newTaskName,completed:false};_this.setState(function(prevState){return{//injecter la nouvelle tache dans la liste actuelle des t창ches \ntasks:[].concat(_toConsumableArray(prevState.tasks),[newTask])};});};_this.onDeleteCompleted=function(){_this.setState(function(prevState){var newState=prevState.tasks.filter(function(task){return!task.completed;});return{tasks:newState};});};return _this;}_createClass(App,[{key:\"render\",//onToggleCompleted pour faire passer cette fonction a ToDoList.js ligne 31\nvalue:function render(){var _this2=this;return/*#__PURE__*/_jsx(\"section\",{id:\"todo\",children:/*#__PURE__*/_jsxs(BrowserRouter,{children:[/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{path:\"/add-task\",render:function render(props){return/*#__PURE__*/_jsx(AddTask,_objectSpread(_objectSpread({},props),{},{onAddTask:_this2.onAddTask}));}}),/*#__PURE__*/_jsx(Route,{path:\"/:filter?\",render:function render(props){return/*#__PURE__*/_jsx(ToDoList,_objectSpread(_objectSpread({},props),{},{tasks:_this2.state.tasks,onToggleCompleted:_this2.onToggleCompleted}));}})]}),/*#__PURE__*/_jsx(NavBar,{onDeleteCompleted:this.onDeleteCompleted})]})});}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["C:/Users/MeliMelo/Desktop/COURSM2i/coursREACT/to-do-list/src/Components/App.js"],"names":["React","ToDoList","NavBar","AddTask","BrowserRouter","Switch","Route","initialData","uniqueid","App","state","tasks","onToggleCompleted","taskId","taskToUpdate","find","task","id","completed","setState","prevState","map","onAddTask","newTaskName","newTask","name","onDeleteCompleted","newState","filter","props","Component"],"mappings":"ymCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OAAQC,aAAR,CAAuBC,MAAvB,CAA+BC,KAA/B,KAA2C,kBAA3C,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,C,GAEMC,CAAAA,G,2TAEJC,K,CAAQ,CACNC,KAAK,CAAEJ,WADD,C,OAIRK,iB,CAAkB,SAACC,MAAD,CAAY,CAC5B,GAAIC,CAAAA,YAAY,CAAG,MAAKJ,KAAL,CAAWC,KAAX,CAAiBI,IAAjB,CAAsB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,EAAL,GAAYJ,MAAhB,EAA1B,CAAnB,CAAsE;AACtEC,YAAY,CAACI,SAAb,CAAyB,CAACJ,YAAY,CAACI,SAAvC,CAEA,MAAKC,QAAL,CAAc,SAAAC,SAAS,CAAI,CACzBA,SAAS,CAACT,KAAV,CAAgBU,GAAhB,CAAoB,SAAAL,IAAI,CAAI,CAC1B,MAAOA,CAAAA,IAAI,CAACC,EAAL,GAAYJ,MAAZ,CAAqBC,YAArB,CAAoCE,IAA3C,CACD,CAFD,EAGD,CAJD,EAKD,C,OAEDM,S,CAAY,SAACC,WAAD,CAAiB,CAC3B,GAAIC,CAAAA,OAAO,CAAG,CACZP,EAAE,CAAET,QAAQ,EADA,CAEZiB,IAAI,CAAEF,WAFM,CAGZL,SAAS,CAAC,KAHE,CAAd,CAKA,MAAKC,QAAL,CAAc,SAAAC,SAAS,QAAI,CAAM;AAC/BT,KAAK,8BAAMS,SAAS,CAACT,KAAhB,GAAuBa,OAAvB,EADoB,CAAJ,EAAvB,EAGD,C,OAEDE,iB,CAAmB,UAAM,CACvB,MAAKP,QAAL,CAAc,SAAAC,SAAS,CAAI,CACzB,GAAIO,CAAAA,QAAQ,CAAEP,SAAS,CAACT,KAAV,CAAgBiB,MAAhB,CAAuB,SAAAZ,IAAI,QAAE,CAACA,IAAI,CAACE,SAAR,EAA3B,CAAd,CACA,MAAO,CACLP,KAAK,CAAEgB,QADF,CAAP,CAGD,CALD,EAMD,C,+CAEH;uBACU,iBACN,mBACE,gBAAS,EAAE,CAAC,MAAZ,uBACE,MAAC,aAAD,yBACE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAE,WAAb,CAAyB,MAAM,CAAE,gBAACE,KAAD,qBAAW,KAAC,OAAD,gCAAaA,KAAb,MAAoB,SAAS,CAAE,MAAI,CAACP,SAApC,GAAX,EAAjC,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,WAAZ,CAAwB,MAAM,CAAE,gBAACO,KAAD,qBAAW,KAAC,QAAD,gCAAcA,KAAd,MAAsB,KAAK,CAAE,MAAI,CAACnB,KAAL,CAAWC,KAAxC,CAA+C,iBAAiB,CAAE,MAAI,CAACC,iBAAvE,GAAX,EAAhC,EAFF,GADF,cAKE,KAAC,MAAD,EAAQ,iBAAiB,CAAE,KAAKc,iBAAhC,EALF,GADF,EADF,CAWD,C,iBAlDe1B,KAAK,CAAC8B,S,EAqDxB,cAAerB,CAAAA,GAAf","sourcesContent":["import React from 'react';\r\nimport ToDoList from './ToDoList';\r\nimport NavBar from './NavBar';\r\nimport AddTask from './AddTask';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport initialData from '../initialData';\r\nimport uniqueid from 'uniqueid';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    tasks: initialData\r\n  }\r\n\r\n  onToggleCompleted=(taskId) => {\r\n    let taskToUpdate = this.state.tasks.find(task => task.id === taskId)  // recherche dans la liste de t창che celle que je dois modifier (pour les afficher dans completed)\r\n    taskToUpdate.completed = !taskToUpdate.completed;\r\n\r\n    this.setState(prevState => {\r\n      prevState.tasks.map(task => {\r\n        return task.id === taskId ? taskToUpdate : task\r\n      })\r\n    })\r\n  }\r\n\r\n  onAddTask = (newTaskName) => {\r\n    let newTask = {\r\n      id: uniqueid(),\r\n      name: newTaskName,\r\n      completed:false\r\n    }\r\n    this.setState(prevState=> ({     //injecter la nouvelle tache dans la liste actuelle des t창ches \r\n      tasks: [...prevState.tasks, newTask]\r\n    }))\r\n  }\r\n\r\n  onDeleteCompleted =() => {\r\n    this.setState(prevState => {\r\n      let newState =prevState.tasks.filter(task=>!task.completed)\r\n      return {\r\n        tasks: newState\r\n      }\r\n    })\r\n  }\r\n\r\n//onToggleCompleted pour faire passer cette fonction a ToDoList.js ligne 31\r\n  render(){\r\n    return (\r\n      <section id=\"todo\">\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path =\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask}/>}/>\r\n            <Route path=\"/:filter?\" render={(props) => <ToDoList {...props}  tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted}/>}/> \r\n          </Switch>\r\n          <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\r\n        </BrowserRouter>\r\n      </section>\r\n    )\r\n  } \r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}