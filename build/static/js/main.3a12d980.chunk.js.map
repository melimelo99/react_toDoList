{"version":3,"sources":["Components/ToDo.js","Components/ToDoList.js","Components/NavBar.js","Components/AddTask.js","initialData.js","Components/App.js","index.js"],"names":["ToDo","state","completed","props","task","toggleCompleted","setState","prevState","onToggleCompleted","id","className","this","name","onClick","React","Component","ToDoList","filteredTasks","tasks","match","params","filter","length","map","NavBar","onDeleteCompleted","to","exact","AddTask","handleSubmit","e","preventDefault","onAddTask","newTask","value","history","push","onSubmit","form","type","required","ref","input","initialData","App","taskId","taskToUpdate","find","newTaskName","uniqueid","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a12d980.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ToDo extends React.Component {\r\n\r\n    state ={\r\n        completed: this.props.task.completed\r\n    }\r\n\r\n    toggleCompleted = () => {\r\n        this.setState(prevState=>({     //prevState ancienne version de l'état , si true alors avec la suite devient false\r\n            completed: !prevState.completed\r\n        }))\r\n        this.props.onToggleCompleted(this.props.task.id)        // execution de la foncion de App.js, id de la tâche que je veux modifier\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <li className={\"list-group-item d-flex align-tiems-center \"+ (this.state.completed? 'bg-success': null)}>\r\n            {this.props.task.name}\r\n            <button className={\"btn btn-sm ml-auto btn-outline-success \" +(this.state.completed? 'btn-success' : 'btn-hotline-sucess')} onClick={() => this.toggleCompleted()}>&#x2713;</button>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\n\r\nconst ToDoList = ({tasks, match, onToggleCompleted}) => {\r\n    let filteredTasks;\r\n\r\n    switch (match.params.filter){\r\n        case 'completed': \r\n            filteredTasks = tasks.filter(task =>task.completed) // ici tasks c'est le param en entrée et filter c'est une fonction pour filter un array\r\n            break;\r\n        default :\r\n            filteredTasks = tasks\r\n    }\r\n\r\n    if(filteredTasks.length === 0){\r\n        return (\r\n            <>\r\n            <h1 className=\"m-3\">Liste de tâches</h1>\r\n            <ul className=\"list-group m-3\">\r\n                <li className=\"list-group-item\">Aucune tâche à afficher</li>\r\n            </ul>\r\n            </>\r\n        )\r\n    }else {\r\n\r\n        return (\r\n            <>\r\n            <h1 className=\"m-3\">Liste de tâches</h1>\r\n            <ul className=\"list-group m-3\">\r\n                {\r\n                    filteredTasks.map((task) => <ToDo task={task} key={task.id} onToggleCompleted={onToggleCompleted}/>)\r\n                    // afficher ce qui est terminé \r\n                }\r\n            </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\r\nimport {FaListAlt, FaCheckSquare, FaPlusSquare, FaTrash} from 'react-icons/fa';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst NavBar = ({onDeleteCompleted}) => (\r\n    <footer className=\"d-flex justify-content-between bg-secondary p-3\" id=\"mainFooter\">\r\n        <div className=\"btn-group\">\r\n            <NavLink to=\"/\" className=\"btn btn-outline-dark bg-light\" exact={true}><FaListAlt/></NavLink>\r\n            <NavLink to=\"/completed\" className=\"btn btn-outline-dark bg-light\" exact={true}><FaCheckSquare/></NavLink>\r\n            <NavLink to=\"/add-task\" className=\"btn btn-outline-dark bg-light\"><FaPlusSquare/></NavLink>\r\n        </div>\r\n        <button className=\"btn btn-outline-dark bg-light\" onClick={onDeleteCompleted}><FaTrash/></button>\r\n    </footer>\r\n\r\n)\r\n\r\nexport default NavBar","import React from 'react'\r\n\r\nclass AddTask extends React.Component{\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.onAddTask(this.newTask.value)\r\n        this.props.history.push('/')\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <section>\r\n                <h1 className=\"m-3\">Nouvelle tâche</h1>\r\n                <div className=\"card mx-3\">\r\n                    <form className=\"card-body\" onSubmit={(e) => this.handleSubmit(e)}>\r\n                        <div className=\"form-group\">\r\n                            <label form=\"taskName\">Nom de la tâche</label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"taskName\" id=\"taskName\" required ref={input => this.newTask = input} />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Créer</button>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTask","let initialData = [\r\n    {id: 'jsertu7a', name: 'Ranger la vaisselle', completed: false},\r\n    {id: 'jseruo7l', name: 'Répondre appel d\\'offres', completed: false},\r\n    {id: 'jseruy2q', name: 'Signer contrat', completed: false},\r\n    {id: 'jserv4sw', name: 'Aspirer le salon', completed: false}\r\n]\r\n\r\nexport default initialData;","import React from 'react';\r\nimport ToDoList from './ToDoList';\r\nimport NavBar from './NavBar';\r\nimport AddTask from './AddTask';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport initialData from '../initialData';\r\nimport uniqueid from 'uniqueid';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    tasks: initialData\r\n  }\r\n\r\n  onToggleCompleted=(taskId) => {\r\n    let taskToUpdate = this.state.tasks.find(task => task.id === taskId)  // recherche dans la liste de tâche celle que je dois modifier (pour les afficher dans completed)\r\n    taskToUpdate.completed = !taskToUpdate.completed;\r\n\r\n    this.setState(prevState => {\r\n      prevState.tasks.map(task => {\r\n        return task.id === taskId ? taskToUpdate : task\r\n      })\r\n    })\r\n  }\r\n\r\n  onAddTask = (newTaskName) => {\r\n    let newTask = {\r\n      id: uniqueid(),\r\n      name: newTaskName,\r\n      completed:false\r\n    }\r\n    this.setState(prevState=> ({     //injecter la nouvelle tache dans la liste actuelle des tâches \r\n      tasks: [...prevState.tasks, newTask]\r\n    }))\r\n  }\r\n\r\n  onDeleteCompleted =() => {\r\n    this.setState(prevState => {\r\n      let newState =prevState.tasks.filter(task=>!task.completed)\r\n      return {\r\n        tasks: newState\r\n      }\r\n    })\r\n  }\r\n\r\n//onToggleCompleted pour faire passer cette fonction a ToDoList.js ligne 31\r\n  render(){\r\n    return (\r\n      <section id=\"todo\">\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path =\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask}/>}/>\r\n            <Route path=\"/:filter?\" render={(props) => <ToDoList {...props}  tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted}/>}/> \r\n          </Switch>\r\n          <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\r\n        </BrowserRouter>\r\n      </section>\r\n    )\r\n  } \r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Components/App';\nimport './css/toDo.css';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}